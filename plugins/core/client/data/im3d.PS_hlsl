cbuffer PerApplication : register(b0)
{
    matrix p;
}

cbuffer PerFrame : register(b1)
{   
    matrix v;   
}

cbuffer PerObject : register(b2)
{
    matrix m;

	bool hasTexture;
	bool hasDistanceField;
}

Texture2D tex : register(t0);

SamplerState texSampler : register(s0);

struct PixelShaderInput {
    float4 position : SV_POSITION;
    float4 color : COLOR;
    float4 worldPos : POSITION;
    float3 normal : NORMAL;
    float2 uv : TEXCOORD0;
};

float median(float r, float g, float b) {
    return max(min(r, g), min(max(r, g), b));
}

float4 main(PixelShaderInput IN)
    : SV_TARGET
{
    float4 colorAcc = IN.color;

	if (hasTexture){
		if (hasDistanceField){
			float2 msdfUnit = 4.0/float2(512.0, 512.0);
			float4 sample = tex.Sample(texSampler, IN.uv);
			float sigDist = median(sample.r, sample.g, sample.b) - 0.5;
			//sigDist *= dot(msdfUnit, float2(0.5));
			sigDist *= 4.0;
			float opacity = saturate(sigDist + 0.5);
			colorAcc = lerp(float4(0,0,0,0), colorAcc, opacity);
		}
		else
		{
			colorAcc = colorAcc * tex.Sample(texSampler, IN.uv);
		}
	}
	
    return colorAcc;
}