#include "pointshadow.sl"

#include "light.hlsl"


cbuffer PerApplication : register(b0)
{
	PointShadowPerApplication app;
};

cbuffer PerFrame : register(b1)
{
	PointShadowPerFrame frame;
};

cbuffer PerObject : register(b2)
{
	PointShadowPerObject object;
};

cbuffer Bones : register(b3)
{
    matrix bones[32];
}


struct AppData {
#ifdef HAS_POS_3D
    float3 aPos : POSITION0;
#endif
#ifdef HAS_POS2
    float2 aPos2 : POSITION1;
#endif
#ifdef HAS_NORMAL
    float3 aNormal : NORMAL;
#endif
#ifdef HAS_COLOR
    float4 aColor : COLOR;
#endif
#ifdef HAS_UV
    float2 aUV : TEXCOORD;
#endif
#ifdef HAS_BONE_INDICES
	int4 aBoneIDs : BONEINDICES;
#endif
#ifdef HAS_BONE_WEIGHTS
	float4 aWeights : WEIGHTS;
#endif
    PointShadowInstanceData aInstance : INSTANCEDATA;
};

struct VertexShaderOutput {
    float4 position : SV_POSITION;
};


VertexShaderOutput main(AppData IN)
{
	VertexShaderOutput OUT;

#ifdef HAS_POS2
    float2 aPos2 = IN.aPos2;
#else
    float2 aPos2 = float2(0,0);
#endif
	
	float4 worldPos;

#ifdef HAS_BONE_INDICES
	if (object.hasSkeleton){
		float4x4 BoneTransform = bones[aBoneIDs[0]] * aWeights[0]
		+ bones[aBoneIDs[1]] * aWeights[1]
		+ bones[aBoneIDs[2]] * aWeights[2]
		+ bones[aBoneIDs[3]] * aWeights[3];
		worldPos = mul(IN.aInstance.m, mul(BoneTransform, float4(IN.aPos, 1.0)));
	}else{
		worldPos = mul(IN.aInstance.m, float4(IN.aPos, 1.0));
	}
#else
	worldPos = mul(IN.aInstance.m, float4(IN.aPos, 1.0));
#endif

    OUT.position = worldPos + float4(aPos2, 0.0, 0.0) - float4(frame.position, 0.0f);	

	return OUT;
}