#version 300 es

precision highp float;

#include "sl_support.glsl_es"
#include "scene.sl"

#include "light.glsl_es"

uniform PerApplication
{
	ScenePerApplication app;
};

uniform PerFrame
{
	ScenePerFrame frame;
};

uniform PerObject
{
	ScenePerObject object;
};

uniform SSBO_Info 
{
	uint SSBO_Offsets[1];
};

uniform SSBO
{
	vec4 SSBO_data[128];
};

mat4 getBone(int index){
	uint index0 = uint(4 * index) + SSBO_Offsets[0];
	return mat4(
		SSBO_data[index0],
		SSBO_data[index0 + uint(1)],
		SSBO_data[index0 + uint(2)],
		SSBO_data[index0 + uint(3)]
	);
}


layout(location = 0) in vec4 aPos;
layout(location = 1) in vec2 aPos2;
layout(location = 2) in vec3 aNormal;
layout(location = 3) in vec4 aColor;
layout(location = 4) in vec2 aUV;
layout(location = 5) in ivec4 aBoneIDs;
layout(location = 6) in vec4 aWeights;
layout(location = 7) in SceneInstanceData aInstance;

out vec4 color;
out vec4 worldPos;
out vec3 normal;
out vec2 uv;
out vec4 lightViewPosition;


void main()
{
	if (object.hasSkeleton){
		mat4 BoneTransform = getBone(aBoneIDs[0]) * aWeights[0]
		+ getBone(aBoneIDs[1]) * aWeights[1]
		+ getBone(aBoneIDs[2]) * aWeights[2]
		+ getBone(aBoneIDs[3]) * aWeights[3];
		worldPos = aInstance.m * BoneTransform * aPos;
	}else{
		worldPos = aInstance.m * aPos;
	}
    gl_Position = app.p * (frame.v * worldPos + vec4(aPos2, 0.0, 0.0));	
	gl_Position.y *= -1.0;

    color = aColor;
	normal = mat3(aInstance.anti_m) * aNormal;
	uv = vec2(aUV.x, aUV.y);
	lightViewPosition = projectShadow(frame.light.caster, worldPos);
}